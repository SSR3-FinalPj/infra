# Prometheus Stack Custom Values
# Configured for dev-system namespace with existing infrastructure

## Global Settings
global:
  resolve_timeout: 5m

## Prometheus Configuration
prometheus:
  service:
    port: 80
    targetPort: 9090
  prometheusSpec:
    retention: 15d
    retentionSize: 10GB
    resources:
      requests:
        memory: 400Mi
        cpu: 100m
      limits:
        memory: 800Mi
        cpu: 200m
    # Storage disabled for temporary monitoring
    # storageSpec: null
    # Enable service discovery for all namespaces
    serviceMonitorNamespaceSelector: {}
    serviceMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    podMonitorSelector: {}
    ruleNamespaceSelector: {}
    ruleSelector: {}
    # Additional Scrape Configs for custom applications
    additionalScrapeConfigs:
      # Kafka JMX metrics (if exposed)
      - job_name: 'kafka-jmx'
        static_configs:
          - targets: ['kafka-0.kafka-headless.dev-system:9999']
        scrape_interval: 30s
        metrics_path: /metrics
      
      # Redis metrics (if redis_exporter is deployed)
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-exporter.dev-system:9121']
        scrape_interval: 30s
        
      # Custom application metrics
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
            namespaces:
              names:
                - dev-system
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true

## Grafana Configuration
grafana:
  enabled: true
  adminUser: admin
  adminPassword: grafana163
  
  # Resource limits
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
  
  # Persistence disabled (as requested)
  persistence:
    enabled: false
  
  # Grafana configuration
  grafana.ini:
    server:
      domain: grafana.dev-cluster.local
      root_url: http://grafana.dev-cluster.local
    security:
      cookie_secure: false
    users:
      allow_sign_up: false
      auto_assign_org: true
      auto_assign_org_role: Viewer
      default_theme: dark
    auth:
      disable_login_form: false
    analytics:
      check_for_updates: false
      reporting_enabled: false
  
  # Additional data sources
  additionalDataSources:
    - name: PostgreSQL
      type: postgres
      url: postgres:5432
      database: postgres
      user: postgres
      jsonData:
        sslmode: disable
        postgresVersion: 1300
      secureJsonData:
        password: example
      isDefault: false
      editable: true
    - name: Airflow PostgreSQL
      type: postgres
      url: postgres:5432
      database: airflow
      user: postgres
      jsonData:
        sslmode: disable
        postgresVersion: 1300
      secureJsonData:
        password: example
      isDefault: false
      editable: true

## AlertManager Configuration
alertmanager:
  service:
    port: 80
    targetPort: 9093
    annotations:
      alb.ingress.kubernetes.io/healthcheck-path: /-/healthy
    # Disable reloader port completely
    additionalPorts: []
  serviceMonitor:
    # Disable service monitor on reloader port
    additionalEndpoints: []
  alertmanagerSpec:
    resources:
      requests:
        memory: 200Mi
        cpu: 50m
      limits:
        memory: 400Mi
        cpu: 100m
    # Storage disabled for temporary monitoring
    # storage: null

## Node Exporter Configuration
nodeExporter:
  enabled: true

## kube-state-metrics Configuration
kubeStateMetrics:
  enabled: true

## Prometheus Operator Configuration
prometheusOperator:
  enabled: true
  resources:
    requests:
      memory: 100Mi
      cpu: 50m
    limits:
      memory: 200Mi
      cpu: 100m

## Default Rules (Kubernetes monitoring)
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

