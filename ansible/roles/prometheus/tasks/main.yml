---
# roles/prometheus/tasks/main.yml

- name: Check if Helm is installed
  command: helm version --short
  register: helm_version
  failed_when: false
  changed_when: false

- name: Ensure Helm is available
  fail:
    msg: 'Helm is not installed or not accessible. Please install Helm first.'
  when: helm_version.rc != 0

- name: Add Prometheus Community Helm repository
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: https://prometheus-community.github.io/helm-charts
    state: present
  register: helm_repo_result

- name: Update Helm repositories
  command: helm repo update
  when: helm_repo_result.changed
  changed_when: true

- name: Check if monitoring stack is already installed
  command: helm list -n '{{ dev_namespace }}' -f monitoring
  register: helm_list_result
  changed_when: false
  failed_when: false

- name: Remove existing standalone Grafana (if exists)
  kubernetes.core.k8s:
    api_version: apps/v1
    kind: Deployment
    name: grafana
    namespace: '{{ dev_namespace }}'
    state: absent
  when: "'monitoring' not in helm_list_result.stdout"

- name: Remove existing Grafana service (if exists)
  kubernetes.core.k8s:
    api_version: v1
    kind: Service
    name: grafana
    namespace: '{{ dev_namespace }}'
    state: absent
  when: "'monitoring' not in helm_list_result.stdout"

- name: "{{ 'Deploy' if (state | default('present')) == 'present' else 'Remove' }} Prometheus Stack using Helm"
  kubernetes.core.helm:
    name: monitoring
    chart_ref: prometheus-community/kube-prometheus-stack
    release_namespace: '{{ dev_namespace }}'
    create_namespace: true
    values_files:
      - '{{ role_path }}/templates/values.yaml'
    wait: true
    wait_timeout: 600s
    atomic: true
    state: "{{ state | default('present') }}"
  when: (state | default('present')) == 'present'

- name: Remove Prometheus Stack using Helm
  kubernetes.core.helm:
    name: monitoring
    release_namespace: '{{ dev_namespace }}'
    state: absent
    wait: true
    wait_timeout: 300s
  when: (state | default('present')) == 'absent'
  ignore_errors: true

- name: "{{ 'Deploy' if (state | default('present')) == 'present' else 'Remove' }} custom ServiceMonitors for existing services"
  kubernetes.core.k8s:
    state: "{{ state | default('present') }}"
    src: 'templates/servicemonitors.yaml'
    namespace: '{{ dev_namespace }}'
  when: (state | default('present')) == 'present'

- name: Create ConfigMap for custom EKS dashboard
  shell: |
    kubectl create configmap eks-nodes-monitoring-dashboard \
      --from-file={{ role_path }}/templates/grafana-dashboards/eks-nodes-monitoring.json \
      --namespace='{{ dev_namespace }}' \
      --dry-run=client -o yaml | \
      sed 's/eks-nodes-monitoring\.json/eks-nodes-monitoring.json/' | \
      kubectl apply -f -
    kubectl label configmap eks-nodes-monitoring-dashboard \
      grafana_dashboard=1 grafana_folder="Kubernetes-Monitoring" \
      --namespace='{{ dev_namespace }}' --overwrite
  ignore_errors: true

- name: Create ConfigMap for custom Application dashboard
  shell: |
    kubectl create configmap application-overview-dashboard \
      --from-file={{ role_path }}/templates/grafana-dashboards/application-overview.json \
      --namespace='{{ dev_namespace }}' \
      --dry-run=client -o yaml | \
      sed 's/application-overview\.json/application-overview.json/' | \
      kubectl apply -f -
    kubectl label configmap application-overview-dashboard \
      grafana_dashboard=1 grafana_folder="Application-Monitoring" \
      --namespace='{{ dev_namespace }}' --overwrite
  ignore_errors: true

- name: Display monitoring access information
  debug:
    msg:
      - 'Prometheus Stack deployed successfully!'
      - '✅ 커뮤니티 대시보드: Node Exporter, Kubernetes Cluster, Redis, PostgreSQL'
      - '✅ 커스텀 대시보드: EKS 노드 모니터링, 애플리케이션 개요'
      - '📊 Grafana: ALB Internal Ingress를 통해 접근 (admin/grafana163)'
      - "🔍 Prometheus: http://monitoring-kube-prometheus-prometheus.'{{ dev_namespace }}':9090"
      - "⚠️ AlertManager: http://monitoring-kube-prometheus-alertmanager.'{{ dev_namespace }}':9093"
      - ''
      - '🎯 대시보드 위치:'
      - '   - Kubernetes-Monitoring 폴더: EKS 노드 모니터링, Node Exporter'
      - '   - Application-Monitoring 폴더: 애플리케이션 개요, Redis, PostgreSQL'
